// Define padding based on the NGA grid
@mixin padding($top: "", $right: "", $bottom: "", $left: "") {
	@if $top == "" {
		$top: 1;
		$right: 1;
		$bottom: 1;
		$left: 1;
	} @else if $right and $bottom and $left == "" {
		$right: $top;
		$bottom: $top;
		$left: $top;
	} @else if $bottom and $left == "" {
		$bottom: $top;
		$left: $right;
	}

	// Output padding for each size
	@include mq($to: 300px) {
		padding: 12px * $top 12px * $right 12px * $bottom 12px * $left;
	}
	@include mq(300px, 400px) {
		padding: 14px * $top 14px * $right 14px * $bottom 14px * $left;
	}
	@include mq(400px, col1) {
		padding: 18px * $top 18px * $right 18px * $bottom 18px * $left;
	}
	@include mq(col1, col2) {
		padding: 12px * $top 12px * $right 12px * $bottom 12px * $left;
	}
	@include mq(col2, 800px) {
		padding: 10px * $top 10px * $right 10px * $bottom 10px * $left;
	}
	@include mq(800px, col3) {
		padding: 12px * $top 12px * $right 12px * $bottom 12px * $left;
	}
	@include mq(col3, 1100px) {
		padding: 10px * $top 10px * $right 10px * $bottom 10px * $left;
	}
	@include mq($from: 1100px) {
		padding: 12px * $top 12px * $right 12px * $bottom 12px * $left;
	}
}

// Define margins based on the NGA grid
@mixin margin($top: "", $right: "", $bottom: "", $left: "") {
	@if $top == "" {
		$top: 1;
		$right: 1;
		$bottom: 1;
		$left: 1;
	} @else if $right and $bottom and $left == "" {
		$right: $top;
		$bottom: $top;
		$left: $top;
	} @else if $bottom and $left == "" {
		$bottom: $top;
		$left: $right;
	}

	// Output margin for each size
	@include mq($to: 300px) {
		margin: 12px * $top 12px * $right 12px * $bottom 12px * $left;
	}
	@include mq(300px, 400px) {
		margin: 14px * $top 14px * $right 14px * $bottom 14px * $left;
	}
	@include mq(400px, col1) {
		margin: 18px * $top 18px * $right 18px * $bottom 18px * $left;
	}
	@include mq(col1, col2) {
		margin: 12px * $top 12px * $right 12px * $bottom 12px * $left;
	}
	@include mq(col2, 800px) {
		margin: 10px * $top 10px * $right 10px * $bottom 10px * $left;
	}
	@include mq(800px, col3) {
		margin: 12px * $top 12px * $right 12px * $bottom 12px * $left;
	}
	@include mq(col3, 1100px) {
		margin: 10px * $top 10px * $right 10px * $bottom 10px * $left;
	}
	@include mq($from: 1100px) {
		margin: 12px * $top 12px * $right 12px * $bottom 12px * $left;
	}
}

// Define widths based on the NGA grid
@mixin rbase-1($cols, $gutcomp:"") {
	@include mq($to: col1) {
		@if $gutcomp == 1 {
			width: (($base-1 * 5) * $cols) + ($base-1 * ($cols));
		} @else {
			width: (($base-1 * 5) * $cols) + ($base-1 * ($cols - 1));
		}
	}
}
@mixin rbase-2($cols, $gutcomp:"") {
	@include mq(col1, col2) {
		@if $gutcomp == 1 {
			width: (($base-2 * 5) * $cols) + ($base-2 * ($cols));
		} @else {
			width: (($base-2 * 5) * $cols) + ($base-2 * ($cols - 1));
		}
	}
}
@mixin rbase-3($cols, $gutcomp:"") {
	@include mq(col2, col3) {
		@if $gutcomp == 1 {
			width: (($base-3 * 5) * $cols) + ($base-3 * ($cols));
		} @else {
			width: (($base-3 * 5) * $cols) + ($base-3 * ($cols - 1));
		}
	}
}
@mixin rbase-4($cols, $gutcomp:"") {
	@include mq($from: col3) {
		@if $gutcomp == 1 {
			width: (($base-4 * 5) * $cols) + ($base-4 * ($cols));
		} @else {
			width: (($base-4 * 5) * $cols) + ($base-4 * ($cols - 1));
		}
	}
}

// Link Underline Style
@mixin text-underline($color, $background, $color-accent) {
	a {
		background-image: linear-gradient(to bottom,$background 50%,lighten($color, 15%) 50%);
		background-repeat: repeat-x;
		background-size: 2px 2px;
		background-position: 0 bottom;
		text-shadow: 4px 2px $background, 3px 2px $background, 2px 2px $background, 1px 2px $background, 0px 2px $background, -1px 2px $background, -2px 2px $background, -3px 2px $background, -4px 2px $background;
	}
	
	a:active {
		background-image: linear-gradient(to bottom,$background 50%,lighten($color-accent, 15%) 50%);
	}
}